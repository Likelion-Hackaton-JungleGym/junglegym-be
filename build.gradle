plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.diffplug.spotless' version '6.19.0'
}

group = 'com.hackathon'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.springframework.security:spring-security-test'

    // DB
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.mysql:mysql-connector-j'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Swagger openapi-ui
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.1'

    // AWS S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // Jackson
    implementation 'com.fasterxml.jackson.core:jackson-databind'

    // Apache for pdf parsing
    implementation 'org.apache.pdfbox:pdfbox:2.0.30'

    // MacOS ARM64(M1/M2) 전용 Netty DNS 네이티브 라이브러리
    runtimeOnly(group: "io.netty",
            name: "netty-resolver-dns-native-macos",
            classifier: "osx-aarch_64")

}

tasks.named('compileJava') {
    dependsOn 'spotlessApply'
}

spotless {
    java {
        // Google JAVA Format 적용
        googleJavaFormat()
        // 아래 순서로 import 문 정렬
        importOrder('java', 'javax', 'jakarta', 'org', 'com')
        // 사용하지 않는 import 제거
        removeUnusedImports()
        // 각 라인 끝에 있는 공백을 제거
        trimTrailingWhitespace()
        // 파일 끝에 새로운 라인 추가
        endWithNewline()
    }
}

def springProfile = project.findProperty("spring.profiles.active") ?: ""

//tasks.named('test') {
//    useJUnitPlatform()
//}
